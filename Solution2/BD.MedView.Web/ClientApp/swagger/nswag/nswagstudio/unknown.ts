/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export module BD.MedView.Services {
  export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

  @Injectable()
  export class PrincipalsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
      this.http = http;
      this.baseUrl = baseUrl ? baseUrl : "http://localhost:11177";
    }

    /**
     * @return OK
     */
    getPrincipals(): Observable<Principal[]> {
      let url_ = this.baseUrl + "/api/Principals";
      url_ = url_.replace(/[?&]$/, "");

      let options_: any = {
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Accept": "application/json"
        })
      };

      return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processGetPrincipals(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processGetPrincipals(<any>response_);
          } catch (e) {
            return <Observable<Principal[]>><any>_observableThrow(e);
          }
        } else
          return <Observable<Principal[]>><any>_observableThrow(response_);
      }));
    }

    protected processGetPrincipals(response: HttpResponseBase): Observable<Principal[]> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (<any>response).error instanceof Blob ? (<any>response).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (resultData200 && resultData200.constructor === Array) {
            result200 = [];
            for (let item of resultData200)
              result200.push(Principal.fromJS(item));
          }
          return _observableOf(result200);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf<Principal[]>(<any>null);
    }

    /**
     * @return OK
     */
    postPrincipal(principal: Principal): Observable<Principal> {
      let url_ = this.baseUrl + "/api/Principals";
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(principal);

      let options_: any = {
        body: content_,
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Content-Type": "application/json",
          "Accept": "application/json"
        })
      };

      return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processPostPrincipal(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processPostPrincipal(<any>response_);
          } catch (e) {
            return <Observable<Principal>><any>_observableThrow(e);
          }
        } else
          return <Observable<Principal>><any>_observableThrow(response_);
      }));
    }

    protected processPostPrincipal(response: HttpResponseBase): Observable<Principal> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (<any>response).error instanceof Blob ? (<any>response).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = resultData200 ? Principal.fromJS(resultData200) : new Principal();
          return _observableOf(result200);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf<Principal>(<any>null);
    }

    /**
     * @return OK
     */
    getPrincipal(id: number): Observable<Principal> {
      let url_ = this.baseUrl + "/api/Principals/{id}";
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      let options_: any = {
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Accept": "application/json"
        })
      };

      return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processGetPrincipal(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processGetPrincipal(<any>response_);
          } catch (e) {
            return <Observable<Principal>><any>_observableThrow(e);
          }
        } else
          return <Observable<Principal>><any>_observableThrow(response_);
      }));
    }

    protected processGetPrincipal(response: HttpResponseBase): Observable<Principal> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (<any>response).error instanceof Blob ? (<any>response).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = resultData200 ? Principal.fromJS(resultData200) : new Principal();
          return _observableOf(result200);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf<Principal>(<any>null);
    }

    /**
     * @return No Content
     */
    putPrincipal(id: number, principal: Principal): Observable<void> {
      let url_ = this.baseUrl + "/api/Principals/{id}";
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(principal);

      let options_: any = {
        body: content_,
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Content-Type": "application/json",
        })
      };

      return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processPutPrincipal(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processPutPrincipal(<any>response_);
          } catch (e) {
            return <Observable<void>><any>_observableThrow(e);
          }
        } else
          return <Observable<void>><any>_observableThrow(response_);
      }));
    }

    protected processPutPrincipal(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (<any>response).error instanceof Blob ? (<any>response).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
      if (status === 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          return _observableOf<void>(<any>null);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf<void>(<any>null);
    }

    /**
     * @return OK
     */
    deletePrincipal(id: number): Observable<Principal> {
      let url_ = this.baseUrl + "/api/Principals/{id}";
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      let options_: any = {
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Accept": "application/json"
        })
      };

      return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processDeletePrincipal(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processDeletePrincipal(<any>response_);
          } catch (e) {
            return <Observable<Principal>><any>_observableThrow(e);
          }
        } else
          return <Observable<Principal>><any>_observableThrow(response_);
      }));
    }

    protected processDeletePrincipal(response: HttpResponseBase): Observable<Principal> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (<any>response).error instanceof Blob ? (<any>response).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = resultData200 ? Principal.fromJS(resultData200) : new Principal();
          return _observableOf(result200);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf<Principal>(<any>null);
    }
  }

  export class Principal implements IPrincipal {
    id?: number | undefined;
    name?: string | undefined;

    constructor(data?: IPrincipal) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(data?: any) {
      if (data) {
        this.id = data["Id"];
        this.name = data["Name"];
      }
    }

    static fromJS(data: any): Principal {
      data = typeof data === 'object' ? data : {};
      let result = new Principal();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["Id"] = this.id;
      data["Name"] = this.name;
      return data;
    }
  }

  export interface IPrincipal {
    id?: number | undefined;
    name?: string | undefined;
  }

  export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
      super();

      this.message = message;
      this.status = status;
      this.response = response;
      this.headers = headers;
      this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
      return obj.isSwaggerException === true;
    }
  }

  function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
      return _observableThrow(result);
    else
      return _observableThrow(new SwaggerException(message, status, response, headers, null));
  }

  function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
      if (!blob) {
        observer.next("");
        observer.complete();
      } else {
        let reader = new FileReader();
        reader.onload = event => {
          observer.next((<any>event.target).result);
          observer.complete();
        };
        reader.readAsText(blob);
      }
    });
  }

}
