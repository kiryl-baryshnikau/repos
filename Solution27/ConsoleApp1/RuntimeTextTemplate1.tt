<#@ template language="C#" debug="True" hostspecific="True" #>
<#@ output extension=".sql" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.IO" #>
<#
    // VARIABLES
    var splitLimit = 1000;
    var templateDirectory = Path.GetDirectoryName(this.Host.ResolvePath("."));
    var outputDirectory = Path.Combine(templateDirectory, "");
    // ConnectionString
    
	//var connection = new SqlConnectionStringBuilder(
    //    "Server=localhost;Initial Catalog=AdventureWorks2012;Integrated Security=true;");
	var connection = new SqlConnectionStringBuilder(
        "Server=localhost;Initial Catalog=BDPortal;Integrated Security=true;");

    // Seed tables to generate a MERGE statement
    var tableList = new List<string>
    {
        "[SPS].[TopMenuItems]"
    };
    var conn = new SqlConnection(connection.ConnectionString);
    var sqlSplits = new List<string>();
    foreach (var tableName in tableList)
    {
        sqlSplits.Clear();
        string command = $"select * FROM {tableName}";
        // Get the schema data for the table.
        conn.Open();
        var dbCommand = new SqlCommand(command, conn);
        var schemaReader = dbCommand.ExecuteReader(CommandBehavior.SchemaOnly | CommandBehavior.KeyInfo);
        var tableData = schemaReader.GetSchemaTable();        // Get Primary Keys
        var primaryKeys = GetPrimaryKeys(tableData);
        conn.Close();
        // Now get the records for the table.
        conn.Open();
        var reader = dbCommand.ExecuteReader();
        // Get the names of the columns.
        var columns = GetColumnNames(reader);
        // Get list of non-key fields.
        var noKeyColumns = GetNonPrimaryColumns(reader, primaryKeys);
        var bracketedColumns = GetColumnNames(reader, true);
        var fullFieldList = String.Join(",", bracketedColumns);
        var updateFields = String.Join("," + Environment.NewLine+" ".PadRight(4), noKeyColumns);
        // build key list
        var primaryKeyList = BuildKeywordList(primaryKeys);
        var rows = BuildRecords(reader, columns);
        // Fix for: The query processor ran out of internal resources and could not 
        //            produce a query plan. This is a rare event and only expected for 
        //            extremely complex queries or queries that reference a very large number of 
        //            tables or partitions. Please simplify the query. If you believe 
        //            you have received this message in error, contact Customer Support 
        //            Services for more information.
        // https://blogs.technet.microsoft.com/mdegre/2012/03/13/8623-the-query-processor-ran-out-of-internal-resources-and-could-not-produce-a-query-plan/
        if (rows.Count > splitLimit)
        {
            var chunkRows = rows
                .Select((x, i) => new {Index = i, Value = x})
                .GroupBy(x => x.Index / splitLimit)
                .Select(x => x.Select(v => v.Value).ToList())
                .ToList();
            sqlSplits.AddRange(
                chunkRows.Select(chunkRow => String.Join("," + Environment.NewLine, chunkRow))
            );
        }
        else
        {
            sqlSplits.Add(String.Join("," + Environment.NewLine, rows));
        }
        conn.Close();
        var allowDelete = sqlSplits.Count == 1;
        for (int index = 0; index < sqlSplits.Count; index++)
        {
            var sqlSplit = sqlSplits[index];
            // Are we on the first record?
            if (sqlSplit == sqlSplits.First())
            {
                #>
-------- Seed <#= tableName #> ------
PRINT 'Starting Merge for <#= tableName #>...'
                <#
            }
#>
MERGE INTO <#= tableName #> AS Target 
USING (VALUES 
<#= sqlSplit #>
) 
AS Source (<#= fullFieldList #>) ON 
    <#= primaryKeyList #>
-- Update Matched Rows
WHEN MATCHED THEN 
UPDATE SET 
    <#= updateFields #>
-- Insert new Rows
WHEN NOT MATCHED BY TARGET THEN 
INSERT (<#= fullFieldList #>) 
VALUES (<#= fullFieldList #>)
<# if (allowDelete) { #>
-- Delete Rows that are in target, but not in source
WHEN NOT MATCHED BY SOURCE THEN 
DELETE;
<# } else { #>
;
<# } #>
GO
<#
            // Are we on the last record?
            if (sqlSplit == sqlSplits.Last())
            {
                #>                
PRINT 'Merging for <#= tableName #> is complete.'
PRINT ''
                <#
            }
        }
        // SaveOutput(Path.Combine(outputDirectory, tableName + ".sql"));
    }    #>
<#+
    private List<string> BuildRecords(SqlDataReader reader, List<string> columns)
    {
        // Build record rows.
        var rows = new List<string>();
        while (reader.Read())
        {
            var values = new List<string>();
            for (var i = 0; i < columns.Count; i++)
            {
                var fieldType = reader.GetFieldType(i);
                if (reader.IsDBNull(i))
                {
                    values.Add("NULL");
                    continue;
                }
                switch (fieldType.Name)
                {
                    case "Int32":
                        values.Add(reader.GetValue(reader.GetOrdinal(columns[i])).ToString());
                        break;
                    case "Boolean":
                        values.Add(reader.GetValue(reader.GetOrdinal(columns[i])).ToString() == "True" ? "1" : "0");
                        break;
                    default:
                        values.Add("'" +
                                   reader.GetValue(reader.GetOrdinal(columns[i]))
                                       .ToString()
                                       .Trim()
                                       .Replace("'", "''")
                                   + "'");
                        break;
                }
            }
            rows.Add("(" + String.Join(",", values) + ")");
        }
        return rows;
    }
    private string BuildKeywordList(List<string> primaryKeys)
    {
        // build key list
        for (var index = 0; index < primaryKeys.Count; index++)
        {
            var key = primaryKeys[index];
            primaryKeys[index] = "Target." + key + " = Source." + key;
        }
        return String.Join(" AND "+Environment.NewLine, primaryKeys);
    }
    private List<string> GetPrimaryKeys(DataTable tableData)
    {
        // Get Primary key(s)
        var primaryKeys = new List<string>();
        foreach (DataRow dataRow in tableData.Rows)
        {
            if (!dataRow.IsNull("IsKey") && dataRow["IsKey"].Equals(true))
            {
                primaryKeys.Add(dataRow["ColumnName"].ToString());
            }
        }
        return primaryKeys;
    }
    private List<string> GetColumnNames(SqlDataReader reader, bool addBrackets = false)
    {
        // Get the names of the columns.
        var columns = new List<string>();
        for (var i = 0; i < reader.FieldCount; i++)
        {
            var columnName = reader.GetName(i);
            if (addBrackets)
            {
                columnName = "[" + columnName + "]";
            }
            columns.Add(columnName);
        }
        return columns;
    }
    private List<string> GetNonPrimaryColumns(SqlDataReader reader, List<string> primaryKeys)
    {
        var noKeyColumns = new List<string>();
        for (var i = 0; i < reader.FieldCount; i++)
        {
            var columnName = reader.GetName(i);
            if (!primaryKeys.Contains(columnName))
            {
                noKeyColumns.Add("["+columnName + "] = Source." + "["+columnName+"]");
            }
        }
        return noKeyColumns;
    }
    private void SaveOutput(String filename)
    {
        /* "this" refers to the T4 TextTransformation instance that's producing the output.
            See https://msdn.microsoft.com/en-us/library/Microsoft.VisualStudio.TextTemplating.TextTransformation.aspx. */
        Directory.CreateDirectory(Path.GetDirectoryName(filename));
        File.Delete(filename);
        File.WriteAllText(filename, this.GenerationEnvironment.ToString());
        GenerationEnvironment.Clear();
    }
#>