// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ConsoleApp1
{
    using System.Linq;
    using System.Collections.Generic;
    using System.Data.SqlClient;
    using System.Data;
    using System.IO;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class RuntimeTextTemplate1 : RuntimeTextTemplate1Base
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 11 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"

    // VARIABLES
    var splitLimit = 1000;
    var templateDirectory = Path.GetDirectoryName(this.Host.ResolvePath("."));
    var outputDirectory = Path.Combine(templateDirectory, "");
    // ConnectionString
    
	//var connection = new SqlConnectionStringBuilder(
    //    "Server=localhost;Initial Catalog=AdventureWorks2012;Integrated Security=true;");
	var connection = new SqlConnectionStringBuilder(
        "Server=localhost;Initial Catalog=BDPortal;Integrated Security=true;");

    // Seed tables to generate a MERGE statement
    var tableList = new List<string>
    {
        "[SPS].[TopMenuItems]"
    };
    var conn = new SqlConnection(connection.ConnectionString);
    var sqlSplits = new List<string>();
    foreach (var tableName in tableList)
    {
        sqlSplits.Clear();
        string command = $"select * FROM {tableName}";
        // Get the schema data for the table.
        conn.Open();
        var dbCommand = new SqlCommand(command, conn);
        var schemaReader = dbCommand.ExecuteReader(CommandBehavior.SchemaOnly | CommandBehavior.KeyInfo);
        var tableData = schemaReader.GetSchemaTable();        // Get Primary Keys
        var primaryKeys = GetPrimaryKeys(tableData);
        conn.Close();
        // Now get the records for the table.
        conn.Open();
        var reader = dbCommand.ExecuteReader();
        // Get the names of the columns.
        var columns = GetColumnNames(reader);
        // Get list of non-key fields.
        var noKeyColumns = GetNonPrimaryColumns(reader, primaryKeys);
        var bracketedColumns = GetColumnNames(reader, true);
        var fullFieldList = String.Join(",", bracketedColumns);
        var updateFields = String.Join("," + Environment.NewLine+" ".PadRight(4), noKeyColumns);
        // build key list
        var primaryKeyList = BuildKeywordList(primaryKeys);
        var rows = BuildRecords(reader, columns);
        // Fix for: The query processor ran out of internal resources and could not 
        //            produce a query plan. This is a rare event and only expected for 
        //            extremely complex queries or queries that reference a very large number of 
        //            tables or partitions. Please simplify the query. If you believe 
        //            you have received this message in error, contact Customer Support 
        //            Services for more information.
        // https://blogs.technet.microsoft.com/mdegre/2012/03/13/8623-the-query-processor-ran-out-of-internal-resources-and-could-not-produce-a-query-plan/
        if (rows.Count > splitLimit)
        {
            var chunkRows = rows
                .Select((x, i) => new {Index = i, Value = x})
                .GroupBy(x => x.Index / splitLimit)
                .Select(x => x.Select(v => v.Value).ToList())
                .ToList();
            sqlSplits.AddRange(
                chunkRows.Select(chunkRow => String.Join("," + Environment.NewLine, chunkRow))
            );
        }
        else
        {
            sqlSplits.Add(String.Join("," + Environment.NewLine, rows));
        }
        conn.Close();
        var allowDelete = sqlSplits.Count == 1;
        for (int index = 0; index < sqlSplits.Count; index++)
        {
            var sqlSplit = sqlSplits[index];
            // Are we on the first record?
            if (sqlSplit == sqlSplits.First())
            {
                
            
            #line default
            #line hidden
            this.Write("-------- Seed ");
            
            #line 85 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(" ------\r\nPRINT \'Starting Merge for ");
            
            #line 86 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("...\'\r\n                ");
            
            #line 87 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"

            }

            
            #line default
            #line hidden
            this.Write("MERGE INTO ");
            
            #line 90 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(" AS Target \r\nUSING (VALUES \r\n");
            
            #line 92 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sqlSplit));
            
            #line default
            #line hidden
            this.Write("\r\n) \r\nAS Source (");
            
            #line 94 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fullFieldList));
            
            #line default
            #line hidden
            this.Write(") ON \r\n    ");
            
            #line 95 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(primaryKeyList));
            
            #line default
            #line hidden
            this.Write("\r\n-- Update Matched Rows\r\nWHEN MATCHED THEN \r\nUPDATE SET \r\n    ");
            
            #line 99 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(updateFields));
            
            #line default
            #line hidden
            this.Write("\r\n-- Insert new Rows\r\nWHEN NOT MATCHED BY TARGET THEN \r\nINSERT (");
            
            #line 102 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fullFieldList));
            
            #line default
            #line hidden
            this.Write(") \r\nVALUES (");
            
            #line 103 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fullFieldList));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 104 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"
 if (allowDelete) { 
            
            #line default
            #line hidden
            this.Write("-- Delete Rows that are in target, but not in source\r\nWHEN NOT MATCHED BY SOURCE " +
                    "THEN \r\nDELETE;\r\n");
            
            #line 108 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 110 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"
 } 
            
            #line default
            #line hidden
            this.Write("GO\r\n");
            
            #line 112 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"

            // Are we on the last record?
            if (sqlSplit == sqlSplits.Last())
            {
                
            
            #line default
            #line hidden
            this.Write("                \r\nPRINT \'Merging for ");
            
            #line 117 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(" is complete.\'\r\nPRINT \'\'\r\n                ");
            
            #line 119 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"

            }
        }
        // SaveOutput(Path.Combine(outputDirectory, tableName + ".sql"));
    }    
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 124 "C:\Users\822616\source\Repos\Solution27\ConsoleApp1\RuntimeTextTemplate1.tt"

    private List<string> BuildRecords(SqlDataReader reader, List<string> columns)
    {
        // Build record rows.
        var rows = new List<string>();
        while (reader.Read())
        {
            var values = new List<string>();
            for (var i = 0; i < columns.Count; i++)
            {
                var fieldType = reader.GetFieldType(i);
                if (reader.IsDBNull(i))
                {
                    values.Add("NULL");
                    continue;
                }
                switch (fieldType.Name)
                {
                    case "Int32":
                        values.Add(reader.GetValue(reader.GetOrdinal(columns[i])).ToString());
                        break;
                    case "Boolean":
                        values.Add(reader.GetValue(reader.GetOrdinal(columns[i])).ToString() == "True" ? "1" : "0");
                        break;
                    default:
                        values.Add("'" +
                                   reader.GetValue(reader.GetOrdinal(columns[i]))
                                       .ToString()
                                       .Trim()
                                       .Replace("'", "''")
                                   + "'");
                        break;
                }
            }
            rows.Add("(" + String.Join(",", values) + ")");
        }
        return rows;
    }
    private string BuildKeywordList(List<string> primaryKeys)
    {
        // build key list
        for (var index = 0; index < primaryKeys.Count; index++)
        {
            var key = primaryKeys[index];
            primaryKeys[index] = "Target." + key + " = Source." + key;
        }
        return String.Join(" AND "+Environment.NewLine, primaryKeys);
    }
    private List<string> GetPrimaryKeys(DataTable tableData)
    {
        // Get Primary key(s)
        var primaryKeys = new List<string>();
        foreach (DataRow dataRow in tableData.Rows)
        {
            if (!dataRow.IsNull("IsKey") && dataRow["IsKey"].Equals(true))
            {
                primaryKeys.Add(dataRow["ColumnName"].ToString());
            }
        }
        return primaryKeys;
    }
    private List<string> GetColumnNames(SqlDataReader reader, bool addBrackets = false)
    {
        // Get the names of the columns.
        var columns = new List<string>();
        for (var i = 0; i < reader.FieldCount; i++)
        {
            var columnName = reader.GetName(i);
            if (addBrackets)
            {
                columnName = "[" + columnName + "]";
            }
            columns.Add(columnName);
        }
        return columns;
    }
    private List<string> GetNonPrimaryColumns(SqlDataReader reader, List<string> primaryKeys)
    {
        var noKeyColumns = new List<string>();
        for (var i = 0; i < reader.FieldCount; i++)
        {
            var columnName = reader.GetName(i);
            if (!primaryKeys.Contains(columnName))
            {
                noKeyColumns.Add("["+columnName + "] = Source." + "["+columnName+"]");
            }
        }
        return noKeyColumns;
    }
    private void SaveOutput(String filename)
    {
        /* "this" refers to the T4 TextTransformation instance that's producing the output.
            See https://msdn.microsoft.com/en-us/library/Microsoft.VisualStudio.TextTemplating.TextTransformation.aspx. */
        Directory.CreateDirectory(Path.GetDirectoryName(filename));
        File.Delete(filename);
        File.WriteAllText(filename, this.GenerationEnvironment.ToString());
        GenerationEnvironment.Clear();
    }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class RuntimeTextTemplate1Base
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
